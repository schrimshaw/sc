	SynthDef(\noise_swipe, { |duration = 0.3, hi = 19000, lo = 300, pan = 1, rq = 0.7, start_pan = -1, end_pan = 1|

		var noise, line, filt, freq_map, rq_map, freq_array;

		noise = WhiteNoise.ar(SinOsc.kr(TRand.kr(2, 15, Dust.kr(3))));

		line = Line.kr(0, 1, duration);
		
		// perhaps rather than deriving freq from Line it shoudl be from a more interesting envelope
		// to get the shapes you want:
		//freq_map = LinExp.kr(line, 0,1, hi, lo);

		freq_map = EnvGen.kr(Env.new(Array.rand(18, lo, hi), Array.rand(17, 0.05, 0.1)));

		rq_map = LinExp.kr(line, 0, 1, rq, 1);

		freq_array = [
			freq_map,
			freq_map*0.5,
			freq_map*1.12,
			freq_map*1.62,
			freq_map*2.32,
			freq_map*1.45,
			freq_map*1.5
		];
		
		filt = Mix(BPF.ar(noise, freq_array, rq_map, freq_array.size.reciprocal));

		Out.ar(0, Pan2.ar(filt, LinLin.kr(line, 0, 1, start_pan, end_pan), EnvGen.kr(Env.linen(0.0001, duration/3, duration, 0.7), doneAction:2)));

	}).add;


	SynthDef(\swipe, { |duration = 0.2, freq_mul = 1|
		var rq, freqs, freq, noise;
		rq = XLine.kr(2, 0.005, duration);
		//rq = LFNoise2.kr(40, 0.8).abs;
		freqs = [12000, 12100, 10000,1000, 4200, 8000, 500]*freq_mul;
		noise = Mix(
			BPF.ar(WhiteNoise.ar(mul:SinOsc.kr(TIRand.kr(3, 20, Dust.kr(2)))),
				freqs,
				rq,
				EnvGen.kr(Env.perc)*freqs.size.reciprocal));

		noise = Compander.ar(noise, noise, 0.12, 1, 0.001, 0.001, 0.01) * 2.2;
		DetectSilence.ar(noise, doneAction: 2);
		Out.ar(0, Pan2.ar(noise, noise, 0.85));
	}).add;
	
SynthDef(\bd, {
	
	var freq, amp, levels, tone;
	
	//freq = [40, 51]++([30, 31.4, 56, 72, 83, 102, 122, 129, 203, 222, 222.6, 301, 302.2] * 2.76);
	
	freq = Control.names([\freq]).kr([40]++Array.fill(1.rrand(9), {|i| [50, 60].choose*(1+i.rrand(2*(1+i)))}));
	
	amp = Array.fill(freq.size, {
		EnvGen.kr(
			Env.new(
				// levels:
				levels = [0, freq.size.reciprocal]++Array.exprand(6.rrand(9), 0.001, freq.size.reciprocal) ++ [0],
				// segment timings
				[0.0023]++Array.exprand(levels.size - 2, 0.03, waittime),
				\sin
			));
		
	});
	
	tone = DynKlang.ar(`[freq, amp, Array.rand(freq.size, -pi, pi)], freqscale: 1) * 0.55;
	
	DetectSilence.ar(tone, doneAction:2);
	
	Out.ar(0, tone.dup*0.3);
	Out.ar(0, Pan2.ar(tone, SinOsc.kr(TRand.kr(1, 14, Dust.kr(3))), 0.7));
	
}).add;
